<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PE派</title>
  
  <subtitle>PE Faction</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.peit.club/"/>
  <updated>2019-01-24T07:52:07.211Z</updated>
  <id>http://www.peit.club/</id>
  
  <author>
    <name>PE Fang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python3基础语法</title>
    <link href="http://www.peit.club/2019/01/23/python33-base/"/>
    <id>http://www.peit.club/2019/01/23/python33-base/</id>
    <published>2019-01-23T08:29:45.000Z</published>
    <updated>2019-01-24T07:52:07.211Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近一段时间一直在看python的一些东西，虽然之前学过一些，但是基本语法忘的实在是有一点快，所以打算写一篇python基础语法的总结，以便以后不熟悉python语法的时候可以快速回顾,不关注细节，主要针对python3的框架结构和最基本的方法。<br><a id="more"></a></p><h2 id="1-python3基本数据类型"><a href="#1-python3基本数据类型" class="headerlink" title="1.python3基本数据类型"></a>1.python3基本数据类型</h2><h3 id="1-1数字"><a href="#1-1数字" class="headerlink" title="1.1数字"></a>1.1数字</h3><p>&emsp;&emsp;python3支持int，float，bool，complex(复数)，python的数字的赋值和基本的运算操作都比较直接。这个只要看到过python的基本操作，应该问题就不是很大。</p><h3 id="1-2字符串"><a href="#1-2字符串" class="headerlink" title="1.2字符串"></a>1.2字符串</h3><p>&emsp;&emsp;Python3中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。python的字符串也是从0为下标开始的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">'hello world!'</span></span><br><span class="line"></span><br><span class="line">str[i] <span class="comment">#str的第i个字符(下标从0开始)</span></span><br><span class="line">str[i:j]<span class="comment">#str的第i个字符到第j个字符</span></span><br><span class="line">str[i:]<span class="comment">#str的第i个字符开始以及之后的所有的字符</span></span><br><span class="line">len(str)<span class="comment">#str的长度</span></span><br></pre></td></tr></table></figure></p><h3 id="1-3列表"><a href="#1-3列表" class="headerlink" title="1.3列表"></a>1.3列表</h3><p>&emsp;&emsp; list是python中出场比较高的数据类型，他用[]来承载，每个元素可以涵盖各种数据类型，list的基本的方法和字符串类似，可以采用同样的方法进行检索和切片,对于list的基本掌握，应该主要关注的他的基本的方法：<br>1.基本的检索和切片方式（和字符串基本一样）<br>2.基本函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> list[i];<span class="comment">#删除第i个元素</span></span><br><span class="line">len(list);<span class="comment">#list长度</span></span><br><span class="line">list.append(obj)<span class="comment">#列表末尾添加新的元素</span></span><br><span class="line">list.pop()<span class="comment">#弹出最后一个元素,并返回该元素的值</span></span><br><span class="line">list.clear()<span class="comment">#清空列表</span></span><br><span class="line">list.copy()<span class="comment">#复制列表</span></span><br></pre></td></tr></table></figure></p><h3 id="1-4元组"><a href="#1-4元组" class="headerlink" title="1.4元组"></a>1.4元组</h3><p>&emsp;&emsp;Python 的元组与列表类似，不同之处在于元组的元素不能修改。元组使用()，列表使用[]。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。元组也可以被索引和切片，方法一样。</p><h3 id="1-5集合"><a href="#1-5集合" class="headerlink" title="1.5集合"></a>1.5集合</h3><p>&emsp;&emsp;集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。基本功能是进行成员关系测试和删除重复元素。可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基本的操作</span></span><br><span class="line">&gt;&gt;&gt;basket = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(basket)                      <span class="comment"># 这里演示的是去重功能</span></span><br><span class="line">&#123;<span class="string">'orange'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'orange'</span> <span class="keyword">in</span> basket                 <span class="comment"># 快速判断元素是否在集合内</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'crabgrass'</span> <span class="keyword">in</span> basket</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基本的函数</span></span><br><span class="line">s.add( x )</span><br><span class="line">s.remove( x )</span><br><span class="line">len(s)</span><br><span class="line">s.clear()</span><br></pre></td></tr></table></figure></p><h3 id="1-6字典"><a href="#1-6字典" class="headerlink" title="1.6字典"></a>1.6字典</h3><p>&emsp;&emsp;字典主要关注键值对的概念，字典是另一种可变容器模型，且可存储任意类型对象。字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br><span class="line">d[key1] <span class="comment">#根据键访问值</span></span><br></pre></td></tr></table></figure></p><h2 id="2-python3基本运算逻辑"><a href="#2-python3基本运算逻辑" class="headerlink" title="2.python3基本运算逻辑"></a>2.python3基本运算逻辑</h2><p>&emsp;&emsp;基本的运算逻辑主要是两个方面，一为条件控制逻辑，二为循环逻辑。对于这两者的掌握还是主要以熟悉基本的语法逻辑为主。<br>1.条件控制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_3</span><br></pre></td></tr></table></figure></p><p>2.循环逻辑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>  判断条件:  <span class="comment">#while循环</span></span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> sequence: <span class="comment">#for循环</span></span><br><span class="line">  statements</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  statements </span><br><span class="line"></span><br><span class="line">range()  <span class="comment">#range函数，可以重点掌握一下他的数字序列遍历方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>,<span class="keyword">continue</span>,<span class="keyword">pass</span> <span class="comment">#区别一下三者不同</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;对于基本的函数和类操作以及模块操作，因为比较范围，所以不展开去讲啦！这里推荐一下菜鸟教程——<a href="http://www.runoob.com/python3/python3-function.html" target="_blank" rel="noopener">函数操作</a>，<a href="http://www.runoob.com/python3/python3-class.html" target="_blank" rel="noopener">类操作</a>，<a href="http://www.runoob.com/python3/python3-module.html" target="_blank" rel="noopener">模块操作</a>，通过快速浏览一下，将可以用最快的速度，去熟悉python的基本语法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;最近一段时间一直在看python的一些东西，虽然之前学过一些，但是基本语法忘的实在是有一点快，所以打算写一篇python基础语法的总结，以便以后不熟悉python语法的时候可以快速回顾,不关注细节，主要针对python3的框架结构和最基本的方法。&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://www.peit.club/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python编程" scheme="http://www.peit.club/tags/python%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>机器人自动化领域欧洲SCI调研</title>
    <link href="http://www.peit.club/2019/01/10/robotSCI/"/>
    <id>http://www.peit.club/2019/01/10/robotSCI/</id>
    <published>2019-01-10T01:32:06.000Z</published>
    <updated>2019-01-10T03:03:49.611Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;因为最近有需要，所以专门花了一些时间，对于近几年的机器人自动化领域的SCI进行了一些调研，从小木虫，web of science查了不少的资料，发现目前的这方面的资料很少，有的就是很长时间之前的，因此我根据自己的查到的，做一个小小的总结，不是很全面，以后根据查询的情况进行更新。<br><a id="more"></a></p><p><div align="center"><img src="http://data.peit.club/19-1-6/99139493.jpg" alt="2018年中科院机器人自动化领域SCI分区表"></div><br>&emsp;&emsp;这个是2017年中科院机器人自动化领域的SCI分区表，目前这个领域尚没有出现突破2区，进入1区的期刊。对于2区和3区的这些期刊，我在此不过多阐述，作为这个领域最富盛名的几个期刊，关于他们的各种信息，在网上比较全面，大家可以根据自己的情况自行查阅。我主要介绍之后的一些资料比较少的期刊。<br><strong>1.ROBOTICA</strong><br>&emsp;&emsp;剑桥出品的机器人领域的期刊，一看这个名字，就是知道，基本上关于机器人领域的所有方向都可以往这期刊投，审稿周期：平均 11 个月的审稿周期 ，大部分徘徊在6-12个月，算是比较慢的一个期刊。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/66435569.jpg" alt="ROBOTICA"></div><br><strong>2.Journal of Intelligent &amp; Robotic Systems</strong><br>&emsp;&emsp;跟robotica的IF并驾齐驱的期刊，近几年在IF方面好像还有赶超的趋势。审稿周期：平均为6个月，一般两个月给第一次决定。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/11022986.jpg" alt="Journal of Intelligent &amp; Robotic Systems"></div><br><strong>3.INTERNATIONAL JOURNAL OF ADVANCED ROBOTIC SYSTEMS</strong><br>&emsp;&emsp;审稿周期：平均 6 个月的审稿周期，好多三个月就完成，比第二个快。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/91281797.jpg" alt="INTERNATIONAL JOURNAL OF ADVANCED ROBOTIC SYSTEMS"></div><br><strong>4.ADVANCED ROBOTICS</strong><br>&emsp;&emsp;重视理论创新，平均 5.25 个月的审稿周期。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/39445547.jpg" alt="ADVANCED ROBOTICS"></div><br><strong>5.International Journal of Humanoid Robotics</strong><br>&emsp;&emsp;仿人机器人方向的，平均 6 个月的审稿周期，资料比较少。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/61689853.jpg" alt="International Journal of Humanoid Robotics"></div><br><strong>6.Intelligent Service Robotics</strong><br>&emsp;&emsp;网上资料较少，所以只能给一些简易的介绍。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/53036847.jpg" alt="Intelligent Service Robotics"></div><br><strong>7.INTERNATIONAL JOURNAL OF ROBOTICS &amp; AUTOMATION</strong><br>&emsp;&emsp;审稿周期：平均为6个月，审稿速度有点慢，三个月左右给一审结果，中的几率比较大一些。</p><p><div align="center"><img src="http://data.peit.club/19-1-6/89415097.jpg" alt="INTERNATIONAL JOURNAL OF ROBOTICS &amp; AUTOMATION"></div><br>&emsp;&emsp;最后跟大家推荐一个微信公众号<strong>中科院文献情报中心分区表</strong>，里面对于期刊的资料收录比较给力，大家有需要的可以关注一下！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;因为最近有需要，所以专门花了一些时间，对于近几年的机器人自动化领域的SCI进行了一些调研，从小木虫，web of science查了不少的资料，发现目前的这方面的资料很少，有的就是很长时间之前的，因此我根据自己的查到的，做一个小小的总结，不是很全面，以后根据查询的情况进行更新。&lt;br&gt;
    
    </summary>
    
      <category term="现状调研" scheme="http://www.peit.club/categories/%E7%8E%B0%E7%8A%B6%E8%B0%83%E7%A0%94/"/>
    
    
      <category term="机器人" scheme="http://www.peit.club/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="http://www.peit.club/2019/01/04/Hello%20world/"/>
    <id>http://www.peit.club/2019/01/04/Hello world/</id>
    <published>2019-01-04T15:21:37.000Z</published>
    <updated>2019-01-08T10:59:22.702Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;Hello world!&quot;);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;之前很长时间就想做一个自己的博客，奈何虽然人很帅，但是脑子很空，更重要的是口袋更空，作为一个十足靠家养的三好学生，找一个闲置的服务器让我尽情玩耍，实在是有那么一点点的小困难。但是再大的困难也难不倒英雄的中国人民。在这一段有些散漫清闲的日子里，我接触到了hexo，可能这就是一见钟情的赶脚。真的好用到想哭，不仅不用服务器，而且可以去薅美帝羊毛(github)，简直要爱死他啦！<br><a id="more"></a><br>&emsp;&emsp;相信以后一个星期，一个月，一年甚至更久的时间能看到我写的这段话的同志们应该基本都会这种搭站技术又或者更高级的技术，但是可能会有那么几个漏网之鱼，所以简单介绍一下我搭建的过程，先列举一下需要的装备，有了好的装备打怪才能顺手。</p><ul><li>git：</li><li>github</li><li>nodejs</li><li>npm</li><li>hexo</li><li>七牛</li><li>腾讯云 </li></ul><p>&emsp;&emsp;其实也有那么一点点的小复杂，搞了好几天，踩了好多的坑，当然收获也不少，这里给大家推荐一个博客<a href="https://blog.csdn.net/Hoshea_chx/article/details/78826689" target="_blank" rel="noopener">Hoshea_Chx</a>，大家如果需求的可以看看，亲测可用。<br>&emsp;&emsp;扯了那么多的淡，说一下自己为啥要写博客啦！当然啦！最重要的是为了装(char)(A+C)/2，能坚持去做一件事情真的好酷，除了这个心思之外，也有一些自己的别的小小想法。从小到大，我就感觉自己并不是一个很会用文字来表达自己的想法的人，其实很讨厌那种文绉绉的感觉，或许真的讨厌什么样的人，就会变成什么样的人，可能现在的我也有些文绉绉，但是应该还是可以看出一些积极向上的。我自己感觉目前来说我最幸福的时光应该是在高中阶段，那时候真的是好爽，没有那么多事需要考虑，身边的兄弟朋友的谈天说地真的让我非常怀念，虽然成绩算不上多好，但是一群人在一起朝着一个目标前进的感觉真的很棒！上了大学之后，生活确实丰富了好多，所有以前憧憬过的全都可以自己去尝试。大一的时候对一切都很好奇，什么都想试试，做什么又有一些害怕，最庆幸的还是自己迈出了第一步去经历了一遍，去参加了学生组织，去跟老师做一些感觉自己完全不可能去接触到的一些技术项目，去勇敢的追的喜欢的女孩(虽然一直是失败的)，这些经历让我的生活变得丰富起来，也让我感觉到生活真的不是只有快乐，只有无忧无虑，要想去走好自己的路，我们需要更多的东西，而且需要付出代价。自己好像真的比以前成熟了一些，更多的东西需要在心里，不管你愿意不愿意。<br>&emsp;&emsp;但是生活嘛！还是要继续滴！而且不管现在的我们是快乐还是痛苦，我们也绝不能去否认他的积极性！所以嘛！我还是希望有那么一点点小小的地方可以去让我在积极的生活中，去记录自己的快乐和痛苦，可能这样的方式能让我更加深刻的去体会自己的生活。所以如果大家以后某天或者什么时候看到这个博客的时候，大家不用去评价我写的这些东西的文采，纯属个人吹b。<br>&emsp;&emsp;我打算主要更新两个方面的内容:<br>&emsp;&emsp;<strong>一、技术方向，我一直做的方向是计算机视觉，虽然做的不能算好，但我真的挺喜欢做这个方向的相关的工作。所以对于技术方面的更新，主要以计算机视觉为主。主要包括图像处理基础和进阶部分(这部分由于我之前学过一些，所以我主要以分享自己的学习路线和学习资料为主)，计算机视觉热门方向(自己比较想多总结总结各个方向的基本思路和主流方法,打算一边学习一边总结)。另外因为最近在学机器学习方面的知识，可能很浅显，还是打算总结成一个比较完整的学习路线。对于自己做过的，写过的一些小项目，我打算做一个小总结，梳理一下自己的做过的东西。我自己也是刚接触没多久，很多方面的知识掌握也肯定有不健全的地方。如果以后大家看到我的错误，欢迎指正，技术这个东西，对就是对，错就是错，没啥可狡辩的。</strong><br>&emsp;&emsp;二、吹b方向，咋个说，咱也是个文艺青年，所以偶尔会闷骚一下，可能是明骚。对于自己遇到的故事，我也会写出来，可能是几句话，可能是一首歌，可能是一段影像，也可能是一部小说，这个我也不好说，大家也知道文艺这东西很奇怪的，谁也不知道哪片云下雨。至于好坏，就不用过多评述啦！技术咱要认真，生活嘛！乐呵乐呵得啦！但是有一点肯定放心，所有的东西肯定以咱党的领导为核心，坚持真善美，弘扬社会主义核心价值观！<br>&emsp;&emsp;没想到啰里啰唆的写了那么多，也算是在正式更新这个博客之前，先定一下纲，正所谓纲举目张嘛！就不多献丑啦！我会在闲暇时间去更新这个博客，但是可能会因为一些迫不得已的事情不得不搁置一段时间，既然开始做了，我就希望细水长流，不知道自己能坚持多久，能写到什么程度，但我相信坚持做一件事情的故事肯定很帅！<br>&emsp;&emsp;对了，我之前开了一个微信公众号，一直在闲置，现在打算一起更新，有interesting的可以关注一下下!!</p><div align="center"><img src="http://data.peit.club/二维码2.png" alt="PE派"></div>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;printf(&amp;quot;Hello world!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;之前很长时间就想做一个自己的博客，奈何虽然人很帅，但是脑子很空，更重要的是口袋更空，作为一个十足靠家养的三好学生，找一个闲置的服务器让我尽情玩耍，实在是有那么一点点的小困难。但是再大的困难也难不倒英雄的中国人民。在这一段有些散漫清闲的日子里，我接触到了hexo，可能这就是一见钟情的赶脚。真的好用到想哭，不仅不用服务器，而且可以去薅美帝羊毛(github)，简直要爱死他啦！&lt;br&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="http://www.peit.club/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="http://www.peit.club/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
